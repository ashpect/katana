---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo-client
  name: mongo-client
  namespace: katana
spec:
  replicas: 1
  selector:
    matchLabels:
      lbtype: external
      app: mongo-client
  template:
    metadata:
      labels:
        lbtype: external
        app: mongo-client
    spec:
      containers:
        - image: mongo
          name: mongo-client
          env:
            - name: mongo-client_INITDB_ROOT_USERNAME
              value: "dummy"
            - name: mongo-client_INITDB_ROOT_PASSWORD
              value: "dummy"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
  namespace: katana
spec:
  replicas: 1
  selector:
    matchLabels:
      lbtype: external
      app: mongo
  strategy: {}
  template:
    metadata:
      labels:
        lbtype: external
        app: mongo
    spec:
      containers:
        - image: mongo
          name: mongo
          args: ["--dbpath", "/data/db"]
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-creds
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-creds
                  key: password
          volumeMounts:
            - name: "mongo-data-dir"
              mountPath: "/data/db"
          ports:
            - name: mongo-port
              containerPort: 27017
      volumes:
        - name: "mongo-data-dir"
          persistentVolumeClaim:
            claimName: "mongo-data"

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongo-svc
  namespace: katana
spec:
  ports:
    - name: mongo-svc
      port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    app: mongo

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-data-pv
  namespace: katana
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /data/mongo

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-data
  namespace: katana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
data:
  username: {{.MongoUsername}}
  password: {{.MongoPassword}}
kind: Secret
metadata:
  creationTimestamp: null
  name: mongo-creds
  namespace: katana
