// Code generated by protoc-gen-go. DO NOT EDIT.
// source: challenge_manager.proto

package challengemanager

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Repo                 string   `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Uname                string   `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Challname            string   `protobuf:"bytes,4,opt,name=challname,proto3" json:"challname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7209902403a3ddb8, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *Request) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *Request) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Request) GetChallname() string {
	if m != nil {
		return m.Challname
	}
	return ""
}

type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7209902403a3ddb8, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "challengemanager.Request")
	proto.RegisterType((*Response)(nil), "challengemanager.Response")
}

func init() {
	proto.RegisterFile("challenge_manager.proto", fileDescriptor_7209902403a3ddb8)
}

var fileDescriptor_7209902403a3ddb8 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0x48, 0xcc,
	0xc9, 0x49, 0xcd, 0x4b, 0x4f, 0x8d, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0x2d, 0xd2, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0x80, 0x4b, 0x40, 0xc5, 0x95, 0xd2, 0xb9, 0xd8, 0x83, 0x52, 0x0b,
	0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0x8a, 0x52, 0x0b, 0xf2, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x11, 0x2e, 0xd6, 0xd2, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26,
	0xb0, 0x20, 0x84, 0x03, 0x12, 0x2d, 0xc9, 0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x86, 0x88, 0x82, 0x39,
	0x42, 0x32, 0x5c, 0x9c, 0x60, 0xe3, 0xc1, 0xea, 0x59, 0xc0, 0x32, 0x08, 0x01, 0x25, 0x15, 0x2e,
	0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x09, 0x2e, 0xf6, 0xe2, 0xd2, 0xe4,
	0xe4, 0xd4, 0xe2, 0x62, 0xb0, 0x65, 0x1c, 0x41, 0x30, 0xae, 0x51, 0x30, 0x97, 0x80, 0x33, 0xcc,
	0x89, 0x6e, 0xf9, 0xa5, 0x79, 0x29, 0x45, 0x95, 0x42, 0xf6, 0x5c, 0x6c, 0x2e, 0xa9, 0x05, 0x39,
	0xf9, 0x95, 0x42, 0x92, 0x7a, 0xe8, 0xee, 0xd7, 0x83, 0x3a, 0x5e, 0x4a, 0x0a, 0x9b, 0x14, 0xc4,
	0xba, 0x24, 0x36, 0xb0, 0xe7, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33, 0x0d, 0xfb, 0x20,
	0x17, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChallengeFoundryClient is the client API for ChallengeFoundry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChallengeFoundryClient interface {
	Deploy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type challengeFoundryClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeFoundryClient(cc grpc.ClientConnInterface) ChallengeFoundryClient {
	return &challengeFoundryClient{cc}
}

func (c *challengeFoundryClient) Deploy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/challengemanager.ChallengeFoundry/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeFoundryServer is the server API for ChallengeFoundry service.
type ChallengeFoundryServer interface {
	Deploy(context.Context, *Request) (*Response, error)
}

// UnimplementedChallengeFoundryServer can be embedded to have forward compatible implementations.
type UnimplementedChallengeFoundryServer struct {
}

func (*UnimplementedChallengeFoundryServer) Deploy(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}

func RegisterChallengeFoundryServer(s *grpc.Server, srv ChallengeFoundryServer) {
	s.RegisterService(&_ChallengeFoundry_serviceDesc, srv)
}

func _ChallengeFoundry_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeFoundryServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/challengemanager.ChallengeFoundry/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeFoundryServer).Deploy(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChallengeFoundry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "challengemanager.ChallengeFoundry",
	HandlerType: (*ChallengeFoundryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _ChallengeFoundry_Deploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "challenge_manager.proto",
}
