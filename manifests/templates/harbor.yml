# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: katana-release-harbor-core
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "MXBwM2NKQ0NzeU9iSEV0SA=="
  tls.key: {{ .HarborKey }}
  tls.crt: {{ .HarborCrt }}
  HARBOR_ADMIN_PASSWORD: "SGFyYm9yMTIzNDU="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "RnY3T3ZSVWZNbjdKNEk3OTZuTGVQZE5tbllVc0JjYWc="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "katana-release-harbor-database"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "katana-release-harbor-jobservice"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "cXhweVJ1SFpRTmQ1cEFOWA=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/nginx/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: katana-release-harbor-nginx
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  tls.crt: {{ .HarborCrt }}
  tls.key: {{ .HarborKey }}
  ca.crt: {{ .HarborCaCrt }}
---
# Source: harbor/templates/notary/notary-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: katana-release-harbor-notary-server
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: notary
type: Opaque
data:
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRZnNuZTNhK0tIdFNUM3o5dlhjV0JtakFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCb1lYSmliM0l0Ym05MFlYSjVMV05oTUI0WERUSXpNRGN4TVRJeU5UUXhPVm9YRFRJMApNRGN4TURJeU5UUXhPVm93R3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1uaE40WG1OaGxaRnliSWJGY1gwTk1PN1VMUkdXWnQKRDVOZlBvRmxLd1AzR3FjcnBJaGVEaTRUZFpRYmNpTGxtZEhpYzVHS1J5cEtHNUpjMHdVREhaMEx1WkJTbEREQwpMbnM0MVdDeW9OSnVuazlCWndLakJLc3dMYzI4R2MzOHEwc2lXQVlyK0krd0xMY2xDM0Z1S0d6dk8yK3dob2czCnZXTnJ5cmN5dndrNHh5dDM1ajU0YkR4NENPVTdmaTFqelhkejdMbWtpY1JCUWlDNUI4RThMUm96eEl0em1GRVAKdWpwT0RYWk80NTdMaHpSR0dJTDdmVzM2Nmd5L2dVaG9DVXhBdlgyTU45dTV4WjN4SzFVeG05eEJJTkVKZFFFSQpaanVTd1d0V2NZUkg2NGxRSXBEd29hTnBUY2ZuaHBkQXJMVUxaYy8xTGtGWFlWSmxVS0lPR0hFQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJRdTZRbzhkaTVmUEFNbjdNSEF1SmorWE5oSwo0ekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBWml0T3Z0dU8yZFFhMjNUQmg0L3pVd2lXNVBZaWtWRS90RjQ3CnZZc3dSZlNKQUJNeEgvMHY5VExMdmxUaDJpRU54LzRkbzllMEhUc0JOZHpoZTQ4b3BxWHZoeGVlN1V5cVFUVTQKMFowenloRS9OTnVudjdIbkIzRmIzbkdGM3IySXpUaFVFYVFaSi95MmxhSWxEdFlnMjZqem5DSVhIQzhyQ0duSwpORUNkUlpkM3gyOWRqd01IaEkrUitOK2hGT1FESjA2WEgxN0N4a09Xd2pOallVWTBPc1NQNUhJL1YrMmxpTERFClR3SHRNL3VTOVVkdmNua0pOaE9lOWtKS1k2QkxSUnIxbzdjNlZnUkhpdW1xWW5UTkkwZUkzODcvc2FoeHMrSEoKZGFJZ2V3d0xCL241WEFLQlNreEt5b0taZGQxRDBXVS9ZNitkUTdYY2ZEaGhQZmZhdHc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaakNDQWs2Z0F3SUJBZ0lSQUxTOFgzTnh3cysrbEFlZVlZRWhFaU13RFFZSktvWklodmNOQVFFTEJRQXcKR3pFWk1CY0dBMVVFQXhNUWFHRnlZbTl5TFc1dmRHRnllUzFqWVRBZUZ3MHlNekEzTVRFeU1qVTBNVGxhRncweQpOREEzTVRBeU1qVTBNVGxhTUM0eExEQXFCZ05WQkFNVEkydGhkR0Z1WVMxeVpXeGxZWE5sTFdoaGNtSnZjaTF1CmIzUmhjbmt0YzJsbmJtVnlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTZBbFkKREd1UEtnSVBLSnlnYk5tSkRyWk5GcHJGWmN1RDhlR1d5b2pjc09pSnV0bHBwVDhmck1KNG9wWmhBNGU3Nk1GYQoyM293a3JsNTNHalZwdnlmZWNETVkyd2FMOUlNa0hoZ3JuOHJFaUo4d2JlY2xTbzlZL3lZaTJNUXRXWE84WGZVCkVXY3B0dk1wdzdjT3dCcjJvQmorbXd2aWZ4aG9oR1NHMlhNWktGdUdwMUZ2ekZNSHdXZ3FYYjNybTBlOHJ5KzcKT25xWnVnVy9IRDdJS0R5YnBsNHhhREpMeDJBTGNVOVlIRnJYcjBWSXNHekYvMkQ5R3pVRlRGalpYUW9tY252NgpJYlEvWFFYQ0tzemtqYmI0ZFd2RWMvMmZpWGtVeGJiUVpoUGJ5SlRhbUhPSFhuQmtqOTE0RXVQK0VSR05wQjZICkkzQVZWUjRJQ1JrK0V2cUpzd0lEQVFBQm80R1JNSUdPTUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUUKRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBVwpnQlF1NlFvOGRpNWZQQU1uN01IQXVKaitYTmhLNHpBdUJnTlZIUkVFSnpBbGdpTnJZWFJoYm1FdGNtVnNaV0Z6ClpTMW9ZWEppYjNJdGJtOTBZWEo1TFhOcFoyNWxjakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBQXR4cUZhUzMKTFAvWW9XT2lSdWpLR2p1ZTFqbG14R2pPcEJGWWJmdjg3UDB0UHkxVk8wcktCcUkrcnRZZDE0SGxqMTh2alFsUApBK3htTmNkVUxnWEllbGpVZEdhVDVYTUpTNmFxV0pvb2xwdyt5M3VQVTQ5UC9uTkJBWk85dTNMSkJNWGovTXRMCi9TUjFqeVBmVElZRzRXVjdSNDN2bVd4dEFoSzBMZUNVWWtLSHRudU5ZVng3eTZ6OWIxR1hha3dvdDc5c05halAKN21vRzdKaGZhYStIQ3VxQ1JHMDZ4WTB6akpacXJyT1RlTmlJUXRzVTZEMkV1MzVvV3dLNVdKOEVHdjVPWGdWUwoyMFJSU0dQM2FsY3plNzFoYnBVVWFrUkNFclZQNzZuWUZyR0RrdjVJNjd5VDdkTVhIbWNKSVc1NHdnZHRNbGJFClIyc0g2dUFJa2V1cmZBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNkFsWURHdVBLZ0lQS0p5Z2JObUpEclpORnByRlpjdUQ4ZUdXeW9qY3NPaUp1dGxwCnBUOGZyTUo0b3BaaEE0ZTc2TUZhMjNvd2tybDUzR2pWcHZ5ZmVjRE1ZMndhTDlJTWtIaGdybjhyRWlKOHdiZWMKbFNvOVkveVlpMk1RdFdYTzhYZlVFV2NwdHZNcHc3Y093QnIyb0JqK213dmlmeGhvaEdTRzJYTVpLRnVHcDFGdgp6Rk1Id1dncVhiM3JtMGU4cnkrN09ucVp1Z1cvSEQ3SUtEeWJwbDR4YURKTHgyQUxjVTlZSEZyWHIwVklzR3pGCi8yRDlHelVGVEZqWlhRb21jbnY2SWJRL1hRWENLc3pramJiNGRXdkVjLzJmaVhrVXhiYlFaaFBieUpUYW1IT0gKWG5Ca2o5MTRFdVArRVJHTnBCNkhJM0FWVlI0SUNSaytFdnFKc3dJREFRQUJBb0lCQUZtVk1lOHBuNDRpV1dQZQpoSGxCeXc1cEIzNFFwdUZVSDA3RlA0aFdLbzRLV1JKUVdkODRiYXd2TUkvazZ2T0g5ZDQ0dURGQURYeTRLdm9UCloxa2U4eHI0ZW5Cd0RmUWtia0ZnbUVNR1NjU29sKzNhUzVPelNSeFBLejIxTTRBMUhCNVJtd2hWQWQvbUpWdXcKVXZ1TDdXZUYvdFl4VW5Lckk3N3BhTDZQRjBsaXdFV3VrNm9aOFE2YzMxdkVFSUFObmJUaEZVSFlmSVFmKzduYgpjdHdsSEVhOVR6L3FHa2cvcHNoWkYrTUJRNnZGREVoV0dNNU9tZG9IdXJPTGxkaVBqYWloZDcvMTViMjdWRm55Cnh1UzJ5c2NyUWJPbHEwWGVqYk9RTDNEamFjRG1Sc1dOazNQMlUydnZGQjZob3ZaRm9FaG9UbVV4SkRlZHl5TDEKbjZWMjhYRUNnWUVBNkpOTmhJR2ZjcTU4THhsSm5kK20xTXc3NDlQcXBpaDBNTXpqOVRidmhDNktHZkdhcUdRVgpjcEdiVXNhTUNFODZIOXd5YnZacVIwM1hnRlNKOWJKK1ZwQ1krMG03ejd1SCtmUlN5d0NMSTR2YmJIQjV6L25OCkFTN2E1aWo3TzZtZGhuS25lbzA5aytsUzlIdUpNeEhoUWVYVjdHVlo2eTducHhEY1VnZnU0aTBDZ1lFQS8yZ2wKYW1KcjZwL05iUlgvMHpuR20ybFBBRTY2T0VoS1k1TDRXYnhZVVhISVFRUERHaXJCQVZSc1V1clV3S0lhKzdDUgpxa0ovMkV3bE1rcjVNQkw4NkFXQ2x1WTlkbW5hVytFQ3d5RnJpZEdRYW5yS0kraGR5aHpoV1NPTTMwc1BJUWpMCnh0NFhQWDYyWWxqZXB1WEVVRGNMSHVmd09wMEQ1MWlzUmF6MjUxOENnWUJlbTBVR0tNQldvem1xNHd0NkovY3kKU3QzMTRFZHNUYnB0KzNxalRqU0NQWGc1ODNqcEZNVlF0SUJOWEt5cjJLYVpQVFphd3V3YWswU2RWRVpHWnRSVApuRUJPd0FDaEVQVFFMWjNjTEIxdFdUL3B6WnNQaWRybHAweXVJVytKSm9jSW9PMFZ3Z3lSZFhFa09IaG9DTmJyCnVuV1owdVNQOGFXVDVSenFWWVhNQlFLQmdRQ3VWNmt5dFh4MDdDQ09GalpMT1dVWk1RbDhiRUV4cWljZFVYVzEKeTV0OS9PMTFjOXY2UUxUKzgySCtOODZDc0NVN0tZeEZiSjlZUnFJZGNwQW5BTThpa3FCUjRWaVRQQzZTQ1VhWgpiSGE3M1JGM25kbmVLUC9jdDFvY1B1Z3FoRklQZXJHZlRuc092ekJBY2VtS2c4MDk5RlRqQS9BNEVuWlh0Vy9qCkgrNXFnUUtCZ1FEWmc1TnVLdTI3dmt0UVJLNmRPNy9mTUxIYXFvcE8vWjV3QUxNL3EwcSs4enROSDRWYjQ4cWQKZmdPV1B3dFNsbnI0eFFoZThlNVkzTFBzaHpIQTFpaWIxbEZhT3p2SVp0dFprQ1haNG9qMS93dHdOdjc2NTNmcAozSXg3TWZrbllkSDJqeUdzODdBVkphdGdyeG5iNVo2aWtSVmpkSlNnRWRoaXNoUitiM1pHcFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  server.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiaHR0cF9hZGRyIjogIjo0NDQzIgogIH0sCiAgInRydXN0X3NlcnZpY2UiOiB7CiAgICAidHlwZSI6ICJyZW1vdGUiLAogICAgImhvc3RuYW1lIjogImthdGFuYS1yZWxlYXNlLWhhcmJvci1ub3Rhcnktc2lnbmVyIiwKICAgICJwb3J0IjogIjc4OTkiLAogICAgInRsc19jYV9maWxlIjogIi9ldGMvc3NsL25vdGFyeS9jYS5jcnQiLAogICAgImtleV9hbGdvcml0aG0iOiAiZWNkc2EiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAa2F0YW5hLXJlbGVhc2UtaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2VydmVyP3NzbG1vZGU9ZGlzYWJsZSIKICB9LAogICJhdXRoIjogewogICAgInR5cGUiOiAidG9rZW4iLAogICAgIm9wdGlvbnMiOiB7CiAgICAgICJyZWFsbSI6ICJodHRwczovL2hhcmJvci5rYXRhbmEubG9jYWwvc2VydmljZS90b2tlbiIsCiAgICAgICJzZXJ2aWNlIjogImhhcmJvci1ub3RhcnkiLAogICAgICAiaXNzdWVyIjogImhhcmJvci10b2tlbi1pc3N1ZXIiLAogICAgICAicm9vdGNlcnRidW5kbGUiOiAiL3Jvb3QuY3J0IgogICAgfQogIH0KfQ==
  signer.json: ewogICJzZXJ2ZXIiOiB7CiAgICAiZ3JwY19hZGRyIjogIjo3ODk5IiwKICAgICJ0bHNfY2VydF9maWxlIjogIi9ldGMvc3NsL25vdGFyeS90bHMuY3J0IiwKICAgICJ0bHNfa2V5X2ZpbGUiOiAiL2V0Yy9zc2wvbm90YXJ5L3Rscy5rZXkiCiAgfSwKICAibG9nZ2luZyI6IHsKICAgICJsZXZlbCI6ICJpbmZvIgogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiYmFja2VuZCI6ICJwb3N0Z3JlcyIsCiAgICAiZGJfdXJsIjogInBvc3RncmVzOi8vcG9zdGdyZXM6Y2hhbmdlaXRAa2F0YW5hLXJlbGVhc2UtaGFyYm9yLWRhdGFiYXNlOjU0MzIvbm90YXJ5c2lnbmVyP3NzbG1vZGU9ZGlzYWJsZSIsCiAgICAiZGVmYXVsdF9hbGlhcyI6ICJkZWZhdWx0YWxpYXMiCiAgfQp9
  NOTARY_SERVER_DB_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBrYXRhbmEtcmVsZWFzZS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzZXJ2ZXI/c3NsbW9kZT1kaXNhYmxl
  NOTARY_SIGNER_DB_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpjaGFuZ2VpdEBrYXRhbmEtcmVsZWFzZS1oYXJib3ItZGF0YWJhc2U6NTQzMi9ub3RhcnlzaWduZXI/c3NsbW9kZT1kaXNhYmxl
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "katana-release-harbor-registry"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "SWprc1hNa0w2ZXlLa2FCdQ=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "katana-release-harbor-registry-htpasswd"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJG9BNU02T3A5LjZUWkQ4VmYzWmV4eXUuV0J6MkU4My9oZ1cyZy8uU0piMm94NjZuT3piYy8y"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "katana-release-harbor-registryctl"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: katana-release-harbor-trivy
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9rYXRhbmEtcmVsZWFzZS1oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: katana-release-harbor-core
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "katana-release-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: {{ printf "https://%s" .HarborHostname }}
  CORE_URL: "http://katana-release-harbor-core:80"
  JOBSERVICE_URL: "http://katana-release-harbor-jobservice"
  REGISTRY_URL: "http://katana-release-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://katana-release-harbor-core:80/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://katana-release-harbor-notary-server:4443"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://katana-release-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://katana-release-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://katana-release-harbor-redis:6379/2?idle_timeout_seconds=30"
  PORTAL_URL: "http://katana-release-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://katana-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "katana-release-harbor-core,katana-release-harbor-jobservice,katana-release-harbor-database,katana-release-harbor-notary-server,katana-release-harbor-notary-signer,katana-release-harbor-registry,katana-release-harbor-portal,katana-release-harbor-trivy,katana-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "katana-release-harbor-jobservice-env"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://katana-release-harbor-core:80"
  TOKEN_SERVICE_URL: "http://katana-release-harbor-core:80/service/token"
  REGISTRY_URL: "http://katana-release-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://katana-release-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "katana-release-harbor-core,katana-release-harbor-jobservice,katana-release-harbor-database,katana-release-harbor-notary-server,katana-release-harbor-notary-signer,katana-release-harbor-registry,katana-release-harbor-portal,katana-release-harbor-trivy,katana-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "katana-release-harbor-jobservice"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://katana-release-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/nginx/configmap-https.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: katana-release-harbor-nginx
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;

    events {
      worker_connections 3096;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path /tmp/client_body_temp;
      proxy_temp_path /tmp/proxy_temp;
      fastcgi_temp_path /tmp/fastcgi_temp;
      uwsgi_temp_path /tmp/uwsgi_temp;
      scgi_temp_path /tmp/scgi_temp;
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server "katana-release-harbor-core:80";
      }

      upstream portal {
        server "katana-release-harbor-portal:80";
      }
      upstream notary-server {
        server katana-release-harbor-notary-server:4443;
      }

      log_format timed_combined '[$time_local]:$remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;

      map $http_x_forwarded_proto $x_forwarded_proto {
        default $http_x_forwarded_proto;
        ""      $scheme;
      }
      server {
        listen 4443 ssl;
        listen [::]:4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;

        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;

        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_buffering off;
          proxy_request_buffering off;

          proxy_send_timeout 900;
          proxy_read_timeout 900;
        }
      }

      server {
        listen 8443 ssl;
        listen [::]:8443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        # Add extra headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; HttpOnly; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $x_forwarded_proto;

          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

      location /service/notifications {
          return 404;
        }
      }
        server {
          listen 8080;
          listen [::]:8080;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      }
    }
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "katana-release-harbor-portal"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "katana-release-harbor-registry"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: katana-release-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "katana-release-harbor-registryctl"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: katana-release-harbor-jobservice
  namespace: katana
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: katana-release-harbor-registry
  namespace: katana
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: katana-release-harbor-core
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: katana-release
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "katana-release-harbor-database"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: katana-release
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "katana-release-harbor-jobservice"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: katana-release
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: https
      port: 443
      targetPort: 8443
    - name: notary
      port: 4443
      targetPort: 4443
  selector:
    release: katana-release
    app: "harbor"
    component: nginx
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: katana-release-harbor-notary-server
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 4443
  selector:
    release: katana-release
    app: "harbor"
    component: notary-server
---
# Source: harbor/templates/notary/notary-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: katana-release-harbor-notary-signer
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 7899
  selector:
    release: katana-release
    app: "harbor"
    component: notary-signer
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "katana-release-harbor-portal"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: katana-release
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: katana-release-harbor-redis
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: katana-release
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "katana-release-harbor-registry"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: katana-release
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "katana-release-harbor-trivy"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: katana-release
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katana-release-harbor-core
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: katana-release
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 8cd0eca6d30642ead0507382b7d5d1f3d2458f0d4d6db1461ead904cf9dc8530
        checksum/secret: eaa2ea132933aaf50e89ada9e9e5e4c294dfe9d1f41074d3f4974ebb3199058f
        checksum/secret-jobservice: ca9e652737e248be7e26af0b2d32eb00df9338d014d0c4a2db0548f2a0f95dad
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
        - name: core
          image: goharbor/harbor-core:v2.8.2
          imagePullPolicy: IfNotPresent
          startupProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            failureThreshold: 360
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            failureThreshold: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            failureThreshold: 2
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "katana-release-harbor-core"
            - secretRef:
                name: "katana-release-harbor-core"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "katana-release-harbor-jobservice"
                  key: JOBSERVICE_SECRET
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: katana-release-harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: katana-release-harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: katana-release-harbor-core
        - name: ca-download
          secret:
            secretName: katana-release-harbor-nginx
        - name: psc
          emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "katana-release-harbor-jobservice"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 587e1545e6a568040ec0af96f8a466585c1a23ec5861a9c9f9491321d1252e05
        checksum/configmap-env: a0425bc37f228887ba7a046bff04594b627dfcc4f7159e8d31e45da84122ded5
        checksum/secret: 8b6aca18ff15fa0fbbb9b22e99460d42a754df320f8f4bbce5da42f68429e0a5
        checksum/secret-core: 64dc22addba2df68c143af8949b22e61c9dfe41ffe01b3327272f317c361d048
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
        - name: jobservice
          image: goharbor/harbor-jobservice:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-core
                  key: secret
          envFrom:
            - configMapRef:
                name: "katana-release-harbor-jobservice-env"
            - secretRef:
                name: "katana-release-harbor-jobservice"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath:
      volumes:
        - name: jobservice-config
          configMap:
            name: "katana-release-harbor-jobservice"
        - name: job-logs
          persistentVolumeClaim:
            claimName: katana-release-harbor-jobservice
---
# Source: harbor/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katana-release-harbor-nginx
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: nginx
      annotations:
        checksum/configmap: 105718f42a530b8d97d6f17752226462eda712f91bf534d50dad96d9216c986f
        checksum/secret: d8cbf92ed677763c1721375bfdddf7e666df0ba6cfcc4ea197f44b395ec49ef6
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: nginx
          image: "goharbor/nginx-photon:v2.8.2"
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 1
            periodSeconds: 10
          ports:
            - containerPort: 8080
            - containerPort: 8443
            - containerPort: 4443
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: certificate
              mountPath: /etc/nginx/cert
      volumes:
        - name: config
          configMap:
            name: katana-release-harbor-nginx
        - name: certificate
          secret:
            secretName: katana-release-harbor-nginx
---
# Source: harbor/templates/notary/notary-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katana-release-harbor-notary-server
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: notary-server
      annotations:
        checksum/secret: 4b245f61401573152f8232d7f714f813baf222453f716ddfc7ef58e97f8247e0
        checksum/secret-core: 56a8e54c07df3ba30b69f7ccbc320ef2cdbb840220233ad1c66739e732dec1cf
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: notary-server
          image: goharbor/notary-server-photon:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /_notary_server/health
              scheme: "HTTP"
              port: 4443
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /_notary_server/health
              scheme: "HTTP"
              port: 4443
            initialDelaySeconds: 20
            periodSeconds: 10
          env:
            - name: MIGRATIONS_PATH
              value: migrations/server/postgresql
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-notary-server
                  key: NOTARY_SERVER_DB_URL
          volumeMounts:
            - name: config
              mountPath: /etc/notary/server-config.postgres.json
              subPath: server.json
            - name: token-service-certificate
              mountPath: /root.crt
              subPath: tls.crt
            - name: signer-certificate
              mountPath: /etc/ssl/notary/ca.crt
              subPath: ca.crt
      volumes:
        - name: config
          secret:
            secretName: "katana-release-harbor-notary-server"
        - name: token-service-certificate
          secret:
            secretName: katana-release-harbor-core
        - name: signer-certificate
          secret:
            secretName: katana-release-harbor-notary-server
---
# Source: harbor/templates/notary/notary-signer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katana-release-harbor-notary-signer
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: notary-signer
      annotations:
        checksum/secret: 5dde37889b3a66de777dfdc34a310d08e0b43751f00280a5f6062bfba51e84c0
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: notary-signer
          image: goharbor/notary-signer-photon:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              scheme: "HTTPS"
              port: 7899
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: "HTTPS"
              port: 7899
            initialDelaySeconds: 20
            periodSeconds: 10
          env:
            - name: MIGRATIONS_PATH
              value: migrations/signer/postgresql
            - name: DB_URL
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-notary-server
                  key: NOTARY_SIGNER_DB_URL
            - name: NOTARY_SIGNER_DEFAULTALIAS
              value: defaultalias
          volumeMounts:
            - name: config
              mountPath: /etc/notary/signer-config.postgres.json
              subPath: signer.json
            - name: signer-certificate
              mountPath: /etc/ssl/notary/tls.crt
              subPath: tls.crt
            - name: signer-certificate
              mountPath: /etc/ssl/notary/tls.key
              subPath: tls.key
      volumes:
        - name: config
          secret:
            secretName: "katana-release-harbor-notary-server"
        - name: signer-certificate
          secret:
            secretName: katana-release-harbor-notary-server
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "katana-release-harbor-portal"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: katana-release
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: eb104fda1e01e33e3fe553cc4b9a71031da281d35823ddc4c4f00b1863e98cef
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: portal
          image: goharbor/harbor-portal:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: portal-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: portal-config
          configMap:
            name: "katana-release-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "katana-release-harbor-registry"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 4592e0c51955c1ad847aa0d84f4f7a757c912e84a951800703701d368f8cb45f
        checksum/secret: e01aa151ce7a64510f3bff66d03126021b36fad623a9198e0336a6db8e18fd10
        checksum/secret-jobservice: ddd02982fa268e2c9b32ca66b1753e5f731291796fd715badde62cd5d4d830d9
        checksum/secret-core: 6fafb9c438f2bdbd43a1b91f1884bdb7c8c0863f1d6ed4ed122f858113e0bb63
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
        - name: registry
          image: goharbor/registry-photon:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 5000
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 5000
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
            - secretRef:
                name: "katana-release-harbor-registry"
          env:
          ports:
            - containerPort: 5000
            - containerPort: 5001
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath:
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: goharbor/harbor-registryctl:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "katana-release-harbor-registryctl"
            - secretRef:
                name: "katana-release-harbor-registry"
            - secretRef:
                name: "katana-release-harbor-registryctl"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-jobservice
                  key: JOBSERVICE_SECRET
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath:
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: registry-htpasswd
          secret:
            secretName: katana-release-harbor-registry-htpasswd

            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-config
          configMap:
            name: "katana-release-harbor-registry"
        - name: registry-data
          persistentVolumeClaim:
            claimName: katana-release-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "katana-release-harbor-database"
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "katana-release-harbor-database"
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: cea4bdb90b3a7a1ba43866e986f27d9e1d7bd4fcd777c1b9d2bd97a16bd3e68f
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
        # as we change the data directory to a sub folder to support psp, the init container here
        # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
        # for more detail.
        # we may remove it after several releases
        - name: "data-migrator"
          image: goharbor/harbor-db:v2.8.2
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            [
              "-c",
              "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true",
            ]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
        # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
        # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
        # use this init container to correct the permission
        # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
        - name: "data-permissions-ensurer"
          image: goharbor/harbor-db:v2.8.2
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
      containers:
        - name: database
          image: goharbor/harbor-db:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
          envFrom:
            - secretRef:
                name: "katana-release-harbor-database"
          env:
            # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
            # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
              subPath:
            - name: shm-volume
              mountPath: /dev/shm
      volumes:
        - name: shm-volume
          emptyDir:
            medium: Memory
            sizeLimit: 512Mi
  volumeClaimTemplates:
    - metadata:
        name: "database-data"
        labels:
          heritage: Helm
          release: katana-release
          chart: harbor
          app: "harbor"
        annotations:
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: katana-release-harbor-redis
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: katana-release-harbor-redis
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
        - name: redis
          image: goharbor/redis-photon:v2.8.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - name: data
              mountPath: /var/lib/redis
              subPath:
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          heritage: Helm
          release: katana-release
          chart: harbor
          app: "harbor"
        annotations:
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: katana-release-harbor-trivy
  namespace: katana
  labels:
    heritage: Helm
    release: katana-release
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: katana-release-harbor-trivy
  selector:
    matchLabels:
      release: katana-release
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: katana-release
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 14244bc2afe8577cf14af43bc2bab2417c596daa09fa1baae0c3c07d138f7a3f
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:v2.8.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "katana-release-harbor-core,katana-release-harbor-jobservice,katana-release-harbor-database,katana-release-harbor-notary-server,katana-release-harbor-notary-signer,katana-release-harbor-registry,katana-release-harbor-portal,katana-release-harbor-trivy,katana-release-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: katana-release-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
            - name: data
              mountPath: /home/scanner/.cache
              subPath:
              readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          heritage: Helm
          release: katana-release
          chart: harbor
          app: "harbor"
        annotations:
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "5Gi"
